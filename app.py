import pandas as pd
import streamlit as st
import plotly.express as px
import extra_streamlit_components as stx

st.set_page_config(page_title="Analysis", page_icon="üî•", layout="wide")

services = [
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ_–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è",
    "–ó–∞–º–µ–Ω–∞_–º–∞—Å–ª–∞_–∏_—Ñ–∏–ª—å—Ç—Ä–æ–≤",
    "–†–µ–º–æ–Ω—Ç_–ø–æ–¥–≤–µ—Å–∫–∏",
    "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ_—Ç–æ—Ä–º–æ–∑–Ω–æ–π_—Å–∏—Å—Ç–µ–º—ã",
    "–ö—É–∑–æ–≤–Ω–æ–π_—Ä–µ–º–æ–Ω—Ç_–∏_–ø–æ–∫—Ä–∞—Å–∫–∞",
    "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ_—É—Å–ª—É–≥–∏",
    "–†–µ–º–æ–Ω—Ç_—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö_—Å–∏—Å—Ç–µ–º",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞_–∏_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
]
# ---- MAINPAGE ----
st.title(":bar_chart: Analysis")
st.markdown("##")

# ---- READ EXCEL ----
@st.cache_data
def get_data_from_csv(file):
    df = pd.read_csv(file)
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–î–∞—Ç–∞" –≤ datetime
    return df

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "txt", "xlsx"])
if uploaded_file is not None:
    df = get_data_from_csv(uploaded_file)
    st.session_state['df'] = df  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏

if 'df' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!")
    st.stop()

df = st.session_state['df']

# ---- SIDEBAR ----
st.sidebar.header("Please Filter Here:")
selected_services = st.sidebar.multiselect(
    "Select the Service:",
    options=services,
    default=services[0]
)

customer_year = st.sidebar.multiselect(
    "Select the year:",
    options=df["–î–∞—Ç–∞"].dt.year.unique(),
    default=df["–î–∞—Ç–∞"].dt.year.unique()
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Å–ª—É–≥–∞–º
def filter_services(df, services):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    mask = df['–£—Å–ª—É–≥–∏'].apply(lambda x: any(service in x for service in services))
    return df[mask]

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
df_filtered = filter_services(df[df['–î–∞—Ç–∞'].dt.year.isin(customer_year)], selected_services)
df_filtered_2graph = df[df['–î–∞—Ç–∞'].dt.year.isin(customer_year)]
# Check if the dataframe is empty:
if df_filtered.empty:
    st.warning("No data available based on the current filter settings!")
    st.stop()  # This will halt the app from further execution.

# TOP KPI's
total_sales = int(df_filtered["–¶–µ–Ω–∞"].sum())
average_sale_by_transaction = round(df_filtered["–¶–µ–Ω–∞"].mean(), 2)

left_column, right_column = st.columns(2)
with left_column:
    st.subheader("Total Sales:")
    st.subheader(f"KZT ‚Ç∏ {total_sales:,}")
with right_column:
    st.subheader("Average Sales Per Transaction:")
    st.subheader(f"KZT ‚Ç∏ {average_sale_by_transaction}")

st.markdown("""---""")

col1, col2 = st.columns([1, 1], gap="medium")

# –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
with col1:
    st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏")
    df_filtered['Month'] = df_filtered['–î–∞—Ç–∞'].dt.to_period('M').astype(str)
    sales_over_time = df_filtered.groupby('Month')['–¶–µ–Ω–∞'].sum().reset_index()
    fig_sales_over_time = px.line(sales_over_time, x='Month', y='–¶–µ–Ω–∞', title='')
    fig_sales_over_time.update_layout(
        xaxis_title='Month',
        yaxis_title='–¶–µ–Ω–∞',
        xaxis_title_font=dict(size=24),  
        yaxis_title_font=dict(size=24),  
        xaxis_tickfont=dict(size=14),    
        yaxis_tickfont=dict(size=14)     
    )
    st.plotly_chart(fig_sales_over_time, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –∏–∑ —É—Å–ª—É–≥
with col2:
    st.subheader("–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–∑ —É—Å–ª—É–≥")
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    df_services_split = df_filtered_2graph.drop('–£—Å–ª—É–≥–∏', axis=1).join(
        df_filtered_2graph['–£—Å–ª—É–≥–∏'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('–£—Å–ª—É–≥–∏'))
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    df_services_split = df_services_split[df_services_split['–£—Å–ª—É–≥–∏'].isin(services)]
    profit_by_service = df_services_split.groupby('–£—Å–ª—É–≥–∏')['–¶–µ–Ω–∞'].sum().reset_index()
    fig_profit_by_service = px.bar(profit_by_service, orientation='h', y='–£—Å–ª—É–≥–∏', x='–¶–µ–Ω–∞', title='')
    fig_profit_by_service.update_layout(
        xaxis_tickangle=0, 
        # margin=dict(l=20, r=20, t=50, b=100),
        xaxis_title_font=dict(size=24),  
        yaxis_title_font=dict(size=24),  
        xaxis_tickfont=dict(size=14),    
        yaxis_tickfont=dict(size=14)    
        )
    st.plotly_chart(fig_profit_by_service, use_container_width=True)

# ---- HIDE STREAMLIT STYLE ----
hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            .css-18e3th9 {padding: 2rem 1rem;}
            .css-1d391kg {padding: 2rem 1rem;}
            </style>
            """
st.markdown(hide_st_style, unsafe_allow_html=True)
