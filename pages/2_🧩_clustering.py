import pandas as pd
import streamlit as st
import plotly.express as px
import extra_streamlit_components as stx
from sklearn.cluster import AgglomerativeClustering
from sklearn.cluster import KMeans
import plotly.graph_objs as go
import plotly.figure_factory as ff

st.set_page_config(page_title="Analysis", page_icon="üî•", layout="wide")

if 'df' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
    st.stop()

df = st.session_state['df']

st.sidebar.header("Please Filter Here:")
customer_year = st.sidebar.multiselect(
    "Select the year:",
    options=df["–î–∞—Ç–∞"].dt.year.unique(),
    default=df["–î–∞—Ç–∞"].dt.year.unique()
)
df_filtered_2graph = df[df['–î–∞—Ç–∞'].dt.year.isin(customer_year)]
# Check if the dataframe is empty:
if df_filtered_2graph.empty:
    st.warning("No data available based on the current filter settings!")
    st.stop()  # This will halt the app from further execution.
df = df_filtered_2graph

# ---- MAINPAGE ----
st.title("üß© Clustering")
st.markdown("##")
st.markdown("""---""")

visits = df.groupby('ID_Client').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π')

# –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
X = visits[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π']].values

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
n_clusters = 4
cluster = AgglomerativeClustering(n_clusters=n_clusters, metric='euclidean', linkage='ward')
visits['–ö–ª–∞—Å—Ç–µ—Ä'] = cluster.fit_predict(X)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
cluster_labels = {
    0: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏', 
    1: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏', 
    2: '–°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏', 
    3: '–ß–∞—Å—Ç—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏'
}

# –¶–µ–Ω—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
cluster_centers = visits.groupby('–ö–ª–∞—Å—Ç–µ—Ä')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π'].mean().reset_index()
label_positions = {i: cluster_centers.loc[cluster_centers['–ö–ª–∞—Å—Ç–µ—Ä'] == i, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π'].values[0] for i in range(n_clusters)}

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å Plotly
fig_clusters = px.scatter(
    visits, x='ID_Client', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π', color='–ö–ª–∞—Å—Ç–µ—Ä',
    title='',
    labels={'ID_Client': 'ID –ö–ª–∏–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π'}
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
for cluster_num, label in cluster_labels.items():
    cluster_data = visits[visits['–ö–ª–∞—Å—Ç–µ—Ä'] == cluster_num]
    fig_clusters.add_annotation(
        x=cluster_data['ID_Client'].mean(), 
        y=label_positions[cluster_num], 
        text=label, 
        showarrow=False, 
        font=dict(size=12, color="black"), 
        bgcolor="white", 
        opacity=0.7
    )
col1, col2 = st.columns([1, 1], gap="medium")
with col1:
    st.subheader("–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
    st.plotly_chart(fig_clusters, use_container_width=True)

customer_data = df.groupby('ID_Client').agg(
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Å–µ—â–µ–Ω–∏–π=('ID_Client', 'size'),
    –°—Ä–µ–¥–Ω–∏–π_—á–µ–∫=('–¶–µ–Ω–∞', 'mean')
).reset_index()
# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ KMeans –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
X = customer_data[['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Å–µ—â–µ–Ω–∏–π', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', 'ID_Client']].values
n_clusters = 5
km = KMeans(n_clusters=n_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)
km.fit(X)
labels = km.labels_
centroids = km.cluster_centers_

customer_data['labels'] = labels

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
trace1 = go.Scatter3d(
    x=customer_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Å–µ—â–µ–Ω–∏–π'],
    y=customer_data['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'],
    z=customer_data['ID_Client'],
    mode='markers',
    marker=dict(
        color=customer_data['labels'],
        size=10,
        line=dict(
            color=customer_data['labels'],
            width=12
        ),
        opacity=0.8
    )
)

df_change = [trace1]
layout = go.Layout(
    title=' ',
    margin=dict(l=0, r=0, b=0, t=0),
    scene=dict(
        xaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π'),
        yaxis=dict(title='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'),
        zaxis=dict(title='ID –∫–ª–∏–µ–Ω—Ç–∞')
    )
)

fig = go.Figure(data=df_change, layout=layout)
with col2:
    st.subheader("3D –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
    st.plotly_chart(fig, use_container_width=True)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ABC –∏ XYZ –∞–Ω–∞–ª–∏–∑–∞
customer_data = df.groupby('ID_Client').agg(
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Å–µ—â–µ–Ω–∏–π=('ID_Client', 'size'),
    –û–±—â–∞—è_—Å—É–º–º–∞=('–¶–µ–Ω–∞', 'sum'),
    –°—Ä–µ–¥–Ω–∏–π_—á–µ–∫=('–¶–µ–Ω–∞', 'mean'),
    –í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫=('–¶–µ–Ω–∞', 'std')
).reset_index()

# ---- ABC-–ê–ù–ê–õ–ò–ó ----
# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫
customer_data = customer_data.sort_values(by='–û–±—â–∞—è_—Å—É–º–º–∞', ascending=False)

# –†–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—É–º–º—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è
customer_data['–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_—Å—É–º–º–∞'] = customer_data['–û–±—â–∞—è_—Å—É–º–º–∞'].cumsum()
total_sum = customer_data['–û–±—â–∞—è_—Å—É–º–º–∞'].sum()
customer_data['–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å'] = customer_data['–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_—Å—É–º–º–∞'] / total_sum

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ ABC
def classify_abc(row):
    if row['–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å'] <= 0.8:
        return 'A'
    elif row['–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å'] <= 0.95:
        return 'B'
    else:
        return 'C'

customer_data['ABC'] = customer_data.apply(classify_abc, axis=1)

# ---- XYZ-–ê–ù–ê–õ–ò–ó ----
# –í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
customer_data['–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫'].fillna(0, inplace=True)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ XYZ
def classify_xyz(row):
    if row['–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫'] <= customer_data['–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫'].quantile(0.3):
        return 'X'
    elif row['–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫'] <= customer_data['–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫'].quantile(0.9):
        return 'Y'
    else:
        return 'Z'

customer_data['XYZ'] = customer_data.apply(classify_xyz, axis=1)

# ---- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ----
st.title("ABC-XYZ Analysis")
st.markdown("##")
st.markdown('---')

col1, col2 = st.columns([1, 1], gap="medium")
with col1:
    # ABC-–∞–Ω–∞–ª—ñ–∑ —Ç–∞–±–ª–∏—Ü—è
    st.subheader("ABC Analysis")
    st.write(customer_data[['ID_Client', '–û–±—â–∞—è_—Å—É–º–º–∞', 'ABC']], use_container_width=True)
with col2:
    # XYZ-–∞–Ω–∞–ª—ñ–∑ —Ç–∞–±–ª–∏—Ü—è
    st.subheader("XYZ Analysis")
    st.write(customer_data[['ID_Client', '–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–∫—É–ø–æ–∫', 'XYZ']], use_container_width=True)

col1, col2 = st.columns([1, 1], gap="medium")
with col1:
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ABC
    st.subheader("ABC –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    abc_distribution = customer_data['ABC'].value_counts().reset_index()
    abc_distribution.columns = ['Category', 'Count']
    st.bar_chart(abc_distribution.set_index('Category'))
with col2:
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è XYZ
    st.subheader("XYZ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    xyz_distribution = customer_data['XYZ'].value_counts().reset_index()
    xyz_distribution.columns = ['Category', 'Count']
    st.bar_chart(xyz_distribution.set_index('Category'))
